buildscript {
    repositories {
        maven { url 'http://repo.lapis.blue/releases' }
    }
    dependencies {
        classpath 'blue.lapis:remapper:1.1-jdk6'
    }
}

// Apply Gradle plugins
plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'checkstyle'

    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}

// Remapper is not available in the Gradle plugins repository so we need to use the old syntax for that
apply plugin: 'net.glowstone.remapper'

defaultTasks 'clean', 'licenseFormat', 'build', 'remap'

// Project information
group = 'blue.lapis.pore'
version = '1.0.0-SNAPSHOT'

sourceCompatibility = 1.6
targetCompatibility = 1.6

// Project repositories
repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
}

project('Porekit') {
    apply from: rootProject.file('bukkit.gradle')
}

configurations {
    shadow
    compile {
        extendsFrom shadow
    }
    shadowRuntime {
        extendsFrom shadow
    }
    runtime {
        extendsFrom shadowRuntime
    }
}

ext {
    slf4jVersion = '1.7.12'
}

// Project dependencies
dependencies {
    // To update, go to https://repo.spongepowered.org/maven/org/spongepowered/spongeapi/2.1-SNAPSHOT/
    // Then pick latest version (or whatever version you want)
    compile 'org.spongepowered:spongeapi:2.1-20150518.024812-71'
    shadow project('Porekit')
    shadow("org.slf4j:jul-to-slf4j:$slf4jVersion") {
        transitive = false
    }
    shadowRuntime 'mysql:mysql-connector-java:5.1.35'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testRuntime "org.slf4j:slf4j-simple:$slf4jVersion"

    checkstyle 'org.spongepowered:checkstyle:6.1.1-sponge1'
}

// Read source files using UTF-8
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-deprecation']
    options.encoding = 'UTF-8'
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events 'skipped'
    }
}

// Remap the older Bukkit methods
remap {
    mappingFile = file('etc/remapper.txt')
    inputTask = shadowJar
    outputFilename = jar.archiveName
}

jar { // The Pore classes will be created in Pore-VERSION-base.jar first
    classifier = 'base'
    manifest {
        attributes(
                'Specification-Title': 'Bukkit',
                'Specification-Version': project('Porekit').version,
                'Specification-Vendor': 'SpigotMC',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Lapis',
                'Main-Class': 'blue.lapis.pore.util.InfoMain'
        )
    }
}

shadowJar {
    configurations = [project.configurations.shadowRuntime]
    dependencies {
        exclude dependency('com.google.guava:guava')
        exclude dependency('com.google.code.gson:gson')
    }

    // Relocate jul-to-slf4j
    relocate 'org.slf4j.bridge', 'blue.lapis.pore.lib.org.slf4j.bridge'
}

// License header formatting
license {
    header file('LICENSE')
    exclude 'LICENSE'
    exclude '*.txt'
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

checkstyle {
    configProperties = [
            'basedir': project.projectDir,
            'severity': 'warning'
    ]
    configFile = file('checkstyle.xml')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}
